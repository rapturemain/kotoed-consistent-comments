@file:Suppress("UNUSED_PARAMETER")
package lesson3.task1

import java.lang.Math.pow
import kotlin.math.*

/**
 * Пример
 *
 * Вычисление факториала
 */
fun factorial(n: Int): Double {
    var result = 1.0
    for (i in 1..n) {
        result = result * i // Please do not fix in master
    }
    return result
}

/**
 * Пример
 *
 * Проверка числа на простоту -- результат true, если число простое
 */
fun isPrime(n: Int): Boolean {
    if (n < 2) return false
    if (n == 2) return true
    if (n % 2 == 0) return false
    for (m in 3..sqrt(n.toDouble()).toInt() step 2) {
        if (n % m == 0) return false
    }
    return true
}

/**
 * Пример
 *
 * Проверка числа на совершенность -- результат true, если число совершенное
 */
fun isPerfect(n: Int): Boolean {
    var sum = 1
    for (m in 2..n/2) {
        if (n % m > 0) continue
        sum += m
        if (sum > n) break
    }
    return sum == n
}

/**
 * Пример
 *
 * Найти число вхождений цифры m в число n
 */
fun digitCountInNumber(n: Int, m: Int): Int =
        when {
            n == m -> 1
            n < 10 -> 0
            else -> digitCountInNumber(n / 10, m) + digitCountInNumber(n % 10, m)
        }

/**
 * Тривиальная
 *
 * Найти количество цифр в заданном числе n.
 * Например, число 1 содержит 1 цифру, 456 -- 3 цифры, 65536 -- 5 цифр.
 *
 * Использовать операции со строками в этой задаче запрещается.
 */
fun digitNumber(n: Int): Int{
    var sum = 0
    var number = n
    if (n == 0) return 1
    while (number != 0){
        number/= 10
        sum++
    }
    return sum
}

/**
 * Простая
 *
 * Найти число Фибоначчи из ряда 1, 1, 2, 3, 5, 8, 13, 21, ... с номером n.
 * Ряд Фибоначчи определён следующим образом: fib(1) = 1, fib(2) = 1, fib(n+2) = fib(n) + fib(n+1)
 */
fun fib(n: Int): Int {
    when (n) {
        1 -> return 1
        2 -> return 1
        3 -> return 2
    }
    var n1 = 2
    var n2 = 1
    for (i in 4..n){
        if (isEven(i)) n2 += n1
        else n1 += n2
    }
    return if (isEven(n)) n2 else n1
}

/**
 * Простая
 *
 * Для заданных чисел m и n найти наименьшее общее кратное, то есть,
 * минимальное число k, которое делится и на m и на n без остатка
 */
fun isEven (n: Int) = (n % 2 == 0)

fun gcd(m: Int, n: Int): Int =
     when (m) {
         0 -> n
         1 -> 1
         else ->
             when (n) {
                 0 -> m
                 1 -> 1
                 else ->
                     when {
                         m == n -> m
                         (isEven(m)) && (isEven(n)) -> 2 * gcd(m / 2, n / 2)
                         (isEven(m)) && (!isEven(n)) -> gcd(m / 2, n)
                         (!isEven(m)) && (isEven(n)) -> gcd(m, n / 2)
                         (!isEven(m)) && (!isEven(n)) && (n > m) -> gcd((n - m) / 2, m)
                         (!isEven(m)) && (!isEven(n)) && (n < m) -> gcd((m - n) / 2, n)
                         else -> -1
                     }
             }
     }

fun lcm(m: Int, n: Int): Int = abs(m * n) / gcd(m, n)

/**
 * Простая
 *
 * Для заданного числа n > 1 найти минимальный делитель, превышающий 1
 */
fun minDivisor(n: Int): Int {
    for (i in 2..sqrt(n.toDouble()).toInt()){
        if (n % i == 0) return i
    }
    return n
}

/**
 * Простая
 *
 * Для заданного числа n > 1 найти максимальный делитель, меньший n
 */
fun maxDivisor(n: Int): Int = n / minDivisor(n)

/**
 * Простая
 *
 * Определить, являются ли два заданных числа m и n взаимно простыми.
 * Взаимно простые числа не имеют общих делителей, кроме 1.
 * Например, 25 и 49 взаимно простые, а 6 и 8 -- нет.
 */
fun isCoPrime(m: Int, n: Int): Boolean = (gcd(m, n) == 1)

/**
 * Простая
 *
 * Для заданных чисел m и n, m <= n, определить, имеется ли хотя бы один точный квадрат между m и n,
 * то есть, существует ли такое целое k, что m <= k*k <= n.
 * Например, для интервала 21..28 21 <= 5*5 <= 28, а для интервала 51..61 квадрата не существует.
 */
fun squareBetweenExists(m: Int, n: Int): Boolean {
    val lo = ceil(sqrt(m.toDouble()))
    val hi = floor(sqrt(n.toDouble()))
    return hi - lo >= 0
}

/**
 * Средняя
 *
 * Гипотеза Коллатца. Рекуррентная последовательность чисел задана следующим образом:
 *
 *   ЕСЛИ (X четное)
 *     Xслед = X /2
 *   ИНАЧЕ
 *     Xслед = 3 * X + 1
 *
 * например
 *   15 46 23 70 35 106 53 160 80 40 20 10 5 16 8 4 2 1 4 2 1 4 2 1 ...
 * Данная последовательность рано или поздно встречает X == 1.
 * Написать функцию, которая находит, сколько шагов требуется для
 * этого для какого-либо начального X > 0.
 */
fun collatzSteps2(x: Int, count: Int): Int =
        when {
            x == 1 -> count
            isEven(x) -> collatzSteps2(x / 2, count + 1)
            else -> collatzSteps2(3 * x + 1, count + 1)
        }

fun collatzSteps(x: Int): Int =
        collatzSteps2(x, 0)

/**
 * Средняя
 *
 * Для заданного x рассчитать с заданной точностью eps
 * sin(x) = x - x^3 / 3! + x^5 / 5! - x^7 / 7! + ...
 * Нужную точность считать достигнутой, если очередной член ряда меньше eps по модулю
 */

fun sin(x: Double, eps: Double): Double {
    val xUp = x % (2 * PI)
    var n = xUp
    var count = 1
    var buffer = n
    while (abs(n) >= eps) {
        count += 2
        n *= xUp * xUp / (count * (count - 1)) * -1.0
        buffer += n
    }
    return buffer
}

/**
 * Средняя
 *
 *
 * Для заданного x рассчитать с заданной точностью eps
 * cos(x) = 1 - x^2 / 2! + x^4 / 4! - x^6 / 6! + ...
 * Нужную точность считать достигнутой, если очередной член ряда меньше eps по модулю
 */
fun cos(x: Double, eps: Double): Double {
    var n = 1.0
    val xUp = x % (2 * PI)
    var count = 0
    var buffer = 1.0
    while (abs(n) >= eps) {
        count += 2
        n *= xUp * xUp / (count * (count - 1)) * -1.0
        buffer += n
    }
    return buffer
}

/**
 * Средняя
 *
 * Поменять порядок цифр заданного числа n на обратный: 13478 -> 87431.
 *
 * Использовать операции со строками в этой задаче запрещается.
 */
fun revert(n: Int): Int {
    var number = n
    var swap = 0
    val count = digitNumber(n)
    var power = pow(10.0, (count - 1).toDouble()).toInt()
    for (i in 1..count) {
        swap += power * (number % 10)
        power /= 10
        number /= 10
    }
    return swap
}

/**
 * Средняя
 *
 * Проверить, является ли заданное число n палиндромом:
 * первая цифра равна последней, вторая -- предпоследней и так далее.
 * 15751 -- палиндром, 3653 -- нет.
 *
 * Использовать операции со строками в этой задаче запрещается.
 */
fun isPalindrome(n: Int): Boolean = (n == revert(n))

/**
 * Средняя
 *
 * Для заданного числа n определить, содержит ли оно различающиеся цифры.
 * Например, 54 и 323 состоят из разных цифр, а 111 и 0 из одинаковых.
 *
 * Использовать операции со строками в этой задаче запрещается.
 */
fun hasDifferentDigits(n: Int): Boolean {
    val last = n % 10
    var number = n
    while (number != 0) {
        if (number % 10 != last) return true
        number /= 10
    }
    return false
}

/**
 * Сложная
 *
 * Найти n-ю цифру последовательности из квадратов целых чисел:
 * 149162536496481100121144...
 * Например, 2-я цифра равна 4, 7-я 5, 12-я 6.
 *
 * Использовать операции со строками в этой задаче запрещается.
 */
fun findNumber(n: Int, nNum: Int) =
        n / pow(10.0, nNum.toDouble() - 1.0).toInt() % 10

fun squareSequenceDigit(n: Int): Int {
    var count = 0
    var countNumber = 1
    var sqrnum = 0
    while (count < n) {
        sqrnum = countNumber * countNumber
        count += digitNumber(sqrnum)
        countNumber++
    }
    return findNumber(sqrnum, count - n + 1)
}

/**
 * Сложная
 *
 * Найти n-ю цифру последовательности из чисел Фибоначчи (см. функцию fib выше):
 * 1123581321345589144...
 * Например, 2-я цифра равна 1, 9-я 2, 14-я 5.
 *
 * Использовать операции со строками в этой задаче запрещается.
 */
fun fibSequenceDigit(n: Int): Int {
    var count = 0
    var countNumber = 1
    var sqrnum = 0
    while (count < n) {
        sqrnum = fib(countNumber)
        count += digitNumber(sqrnum)
        countNumber++
    }
    return findNumber(sqrnum, count - n + 1)
}