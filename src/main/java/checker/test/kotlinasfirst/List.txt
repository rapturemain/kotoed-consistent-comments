
/**
 * Сложная
 *
 * Перевести заданное целое число n >= 0 в систему счисления с основанием 1 < base < 37.
 * Результат перевода вернуть в виде строки, цифры более 9 представлять латинскими
 * строчными буквами: 10 -> a, 11 -> b, 12 -> c и так далее.
 * Например: n = 100, base = 4 -> 1210, n = 250, base = 14 -> 13c
 */
fun convertToString(n: Int, base: Int): String {
    val list = convert(n, base)
    return list.joinToString("") {
        it -> if (it > 9) (it + 87).toChar().toString()
        else it.toString()
    }
}

fun russian(n: Int): String {
    val list = mutableListOf<String>()
    val sym = mutableListOf("", "один", "два", "три", "четыре", "пять", "шесть", "семь", "восемь", "девять", "десять"
            , "одиннадцать", "двенадцать", "тринадцать", "четырнадцать", "пятнадцать", "шестнадцать", "семнадцать"
            , "восемнадцать", "девятнадцать", "двадцать", "тридцать", "сорок", "пятьдесят", "шестьдесят", "семьдесят"
            , "восемьдесят", "девяносто", "", "сто", "двести", "триста", "четыреста", "пятьсот", "шестьсот", "семьсот"
            , "восемьсот", "девятьсот", "тысяча", "тысячи", "тысяч", "", "одна", "две", "три", "четыре", "пять"
            , "шесть", "семь", "восемь", "девять", "десять")
    val dec = 18
    val hun = 28
    val tho = 38
    val hundec = 41
    var number = n % 1000
    if ((number % 100)<20){
        list.add(sym[number % 100])
        list.add(sym[(number / 100) + hun])
    } else {
            list.add(sym[number % 10])
            number /= 10
            if (number % 10 != 0)
            list.add(sym[(number % 10) + dec])
            number /= 10
            list.add(sym[(number % 10) + hun])
    }
    number = n / 1000
    if (number > 0) {
        if (number % 100 in 5..20) {
            list.add(sym[tho + 2])
        } else
            when (number % 10) {
                0 -> list.add(sym[tho + 2])
                1 -> list.add(sym[tho])
                2 -> list.add(sym[tho + 1])
                3 -> list.add(sym[tho + 1])
                4 -> list.add(sym[tho + 1])
                5 -> list.add(sym[tho + 2])
                6 -> list.add(sym[tho + 2])
                7 -> list.add(sym[tho + 2])
                8 -> list.add(sym[tho + 2])
                9 -> list.add(sym[tho + 2])
            }
        if (number % 100 in 10..19) {
            list.add(sym[number % 100])
            list.add(sym[(number / 100) + hun])
        } else {
            number = n / 1000
            list.add(sym[(number % 10) + hundec])
            number /= 10
            if (number % 10 != 0)
            list.add(sym[(number % 10) + dec])
            number /= 10
            list.add(sym[(number % 10) + hun])
        }
    }
    return list.filter{it != ""}.reversed().joinToString(" ")
}