fun asFar(matrix: Matrix<Int>, rightR: Matrix<Int>, rightL: Matrix<Int>): Double {
    var asCloseR = 0.0
    var asCloseL = 0.0
    for (i in 0 until 4) {
        for (j in 0 until 4) {
            if (matrix[i, j] != 0) {
                if (matrix[i, j] != rightR[i, j]) {
                    val cell = getCell(rightR, matrix[i, j]) ?: throw IllegalArgumentException()
                    asCloseR += abs(i - cell.row) + abs(j - cell.column)
                }
                if (matrix[i, j] != rightL[i, j]) {
                    val cell = getCell(rightL, matrix[i, j]) ?: throw IllegalArgumentException()
                    asCloseL += abs(i - cell.row) + abs(j - cell.column)
                }
            }
        }
    }
    var removeEdges = 0
    if ((matrix[0, 0] != rightR[0, 0]) && (matrix[0, 1] == rightR[0, 1]) && (matrix[1, 0] == rightR[1, 0]))
        removeEdges += 2
    if ((matrix[0, 3] != rightR[0, 3]) && (matrix[0, 2] == rightR[0, 2]) && (matrix[1, 3] == rightR[1, 3]))
        removeEdges += 2
    if ((matrix[3, 0] != rightR[3, 0]) && ((matrix[3, 1] == rightR[3, 1]) || (matrix[3, 1] == rightL[3, 1]))
            && (matrix[2, 0] == rightR[2, 0])) removeEdges += 2
    for (row in 0 until 4) {
        var currentRow = 0
        var prev = 4 * row + 1
        for (i in 0 until 4) {
            for (j in 0 until 4) {
                if (matrix[row, i] == rightR[row, j]) {
                    if (prev > matrix[row, i]) currentRow++
                    prev = matrix[row, i]
                }
            }
        }
        asCloseR += currentRow * 2
        asCloseL += currentRow * 2
    }
    var edgeFirst = false
    var edgeSecond = false
    var edgeThrid = false
    for (column in 0 until 4) {
        var currentColumnR = 0
        var currentColumnL = 0
        var prevR = column + 1
        var prevL = column + 1
        for (i in 0 until 4) {
            for (j in 0 until 4) {
                if (matrix[i, column] == rightR[j, column]) {
                    if (prevR > matrix[i, column]) {
                        currentColumnR++
                        if ((i == 3) && (column == 0)) edgeThrid = true
                        if ((i == 0) && (column == 3)) edgeSecond = true
                        if ((i == 0) && (column == 0)) edgeFirst = true
                    }
                    prevR = matrix[i, column]
                    if (prevL > matrix[i, column]) {
                        currentColumnL++
                        if ((i == 3) && (column == 0)) edgeThrid = true
                        if ((i == 0) && (column == 3)) edgeSecond = true
                        if ((i == 0) && (column == 0)) edgeFirst = true
                    }
                    prevL = matrix[i, column]
                }
            }
        }
        asCloseR += currentColumnR * 2
        asCloseL += currentColumnL * 2
    }
    if (edgeFirst) removeEdges -= 2
    if (edgeSecond) removeEdges -= 2
    if (edgeThrid) removeEdges -= 2
    return min(asCloseR, asCloseL) + removeEdges
}